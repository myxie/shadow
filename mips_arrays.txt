def read_matrix(matrix):
    lmatrix = []
    f = open(matrix)
    next(f)
    csv_reader = reader(f)
    for row in csv_reader:
        lmatrix.append(list(map(int,row)))
    f.close()
    return lmatrix
clear
read_matrix
read_matrix('tests/data/topcuoglu_comp.txt
read_matrix('tests/data/topcuoglu_comp.txt')
import csv
read_matrix('tests/data/topcuoglu_comp.txt')
from csv import reader
clear
read_matrix('tests/data/topcuoglu_comp.txt')
data = read_matrix('tests/data/topcuoglu_comp.txt')
data
[100,200,300]
data[0]
data[0]/[100,200,300]
import numpy as np
npdata = np.array(data)
npdata/np.array([100,200,300])
npdata
npdata[0]/np.array([100,200,300])
val = npdata[0]/np.array([100,200,300])
val * np.array([100,200,300])
int(val * np.array([100,200,300]))
val * np.array([100,200,300])
val
list(val * np.array([100,200,300]))
int(list(val * np.array([100,200,300])))
npdata/np.array([100,200,300],int)
val * np.array([100,200,300])
newval = val * np.array([100,200,300])
newval
newval(dtype=int)
newval = val * np.array([100,200,300],dtype=int)
newval
newval = np.array(val,dtype=int) * np.array([100,200,300],dtype=int)
newvla
newval
newval = np.array(val * np.array([100,200,300],dtype=int), dtype=int)
newval
newval = np.array(val * np.array([100,200,300],dtype=int), dtype=int)
newval
npdata/np.array([100,200,300],int)
npdata
npdata = npdata*1000
npdata
npdata=npdata/1000
npdata = npdata*1000
npdata=npdata/np.array(200,100,300)
npdata=npdata/(np.array(200,100,300))
new_npdata=npdata/(np.array(200,100,300))
npdata=npdata/(np.array(200,100,300))
npdata/(np.array(200,100,300))
npdata=npdata/(np.array([200,100,300]))
npdata
npdata = npdata*1000
npdata
new_npdata=npdata/(np.array(200,100,300))
data = read_matrix('tests/data/topcuoglu_comp.txt')
data
npdata=np.array(data)
npdata
ls
clera
ls
clear
npdata[0]
npdata[0]
npdata[,0]
npdata[:0]
npdata[,]
npdata
npdata[0:1,]
npdata[0:1,0]
npdata[,0]
npdata
npdata[0:10]
npdata[0:10,0]
npdata[0]
npdata[0]/10000
npdata[0]/1000
1000/npdata[0]
10000/npdata[0]
100000/npdata[0]
resource_mips = 100000/npdata[0]
resource_mips
npdata[1]
7142/13
6250/19
clear
npdata
1000/npdata[0]
resource_mips
2000/npdata[1]
npdata
npdata[0]*resource_mips
(npdata[0]*resource_mips)/resource_mips
50000/npdata[1]
1000/npdata[0]
np.array([14,16,9])
10000/np.array([14,16,9])
np.array(10000/np.array([14,16,9]),dtype=int)
res_mipsnp.array(10000/np.array([14,16,9]),dtype=int)
res_mips=np.array(10000/np.array([14,16,9]),dtype=int)
npdata[0]*res_mips
1000000/np.array([14,16,9])
res_mips=1000000/np.array([14,16,9])
res_mips
50000/res_mips
50000/res_mips
500000/res_mips
100000/res_mips
res_mips*2
res_mips*np.array([2,5,6])
10/15
100/85
1000/85
76/15
750/15
750/85
750/8.5
clear
np.array([100,50,150,1250,250,750,250])
np.array([100,50,150,1250,250,750,250])/np.array([25,5,10])
np.array([100,50,150,1250,250,750,250],3)
np.array([100,50,150,1250,250,750,250])
n = np.array([100,50,150,1250,250,750,250])
np.array(n,n,n)
np.array([n,n,n]
)
orig = np.array(n,n,n)
orig = np.array([n,n,n])
orgi
orig
orig/np.array([25,5,10])
orig.transpose
orig.transpose()
orig = orig.transpose()
orig/np.array([25,5,10])
np.array(orig/np.array([25,5,10]),int)
    csv_header= ['P1', 'P2', '...', 'Pn']
csvfile = open('test_mips_heft.csv','w')
writer = csv.writer(csvfile)
writer.writerow(csv_header)
writer = csv.writer(csvfile,delimeter=',')
writer = csv.writer(csvfile,delimiter=',')
final_array = np.array(orig,np.array([25,5,10]),int)
final_array = np.array(orig/np.array([25,5,10]),int)
final_array
for row in final_array:
    writer.writerow(row)
csvfile.close()
np.average(10,50,25)
10+50+25
/
/3
85/3
npdata
orig
orig.transpose
orig
orig.transpose()
orig
orig/2
orig/10
(orig/10)*2
((orig/10)*2)/np.array(10,2,5)
((orig/10)*2)/np.array([10,2,5]
)
orig
orig[3][0]=125
orig[3][1]=125
orig[3][2]=125
orig
((orig/10)*2)/np.array([10,2,5]
)
np.array((orig/10)*2)/np.array([10,2,5]
,int)
np.array(((orig/10)*2)/np.array([10,2,5]),int)
orig[5][0]=75
orig[5][1]=75
orig[5][2]=75
((orig/10)*2)/np.array([10,2,5]
)
np.array(((orig/10)*2)/np.array([10,2,5]),int)
csvfile = open('test_mips_heft.csv','w')
writer = csv.writer(csvfile)
writer.writerow(csv_header)
final_array = np.array(orig/np.array([10,2,5]),int)
for row in final_array:
    writer.writerow(row)
csvfile.close()
final_array
orig
orig/np.array([10,2,5],int)
final_array = np.array((orig*2)/np.array([10,2,5]),int)
final_array
final_array = np.array((orig/5)/np.array([10,2,5]),int)
final_array
csvfile = open('test_mips_heft.csv','w')
writer = csv.writer(csvfile)
writer.writerow(csv_header)
for row in final_array:
    writer.writerow(row)
csvfile.close()
10+25+5
/3
(10+25+5)/3
npdata
100/14
140/14
100/npdata[0]
7.14*14
int(7.14*14)
7.15*14
11.1*9
int(11.1*9)
resource= np.array(100/npdata[0],int)
resource
np.random.rand(10,3)
np.zeros((10,3)) + np.random.rand(10,3)
np.full_like((10,3),100) + np.random.rand(10,3)
np.arrage((10,3))
x =np.arrange((10,3))
x =np.arange((10,3))
np.full((10,3),100)
np.full((10,3),100) + (np.random.rand(10,3)*100)
(np.full((10,3),100) + (np.random.rand(10,3)*100))/resources
(np.full((10,3),100) + (np.random.rand(10,3)*100))/resource
(np.full((10,3),70) + (np.random.rand(10,3)*100))/resource
new_heft=np.array(((np.full((10,3),70) + (np.random.rand(10,3)*100))/resource),int)
new_heft
resource
resource*new_heft
new_heft/resource
resource*new_heft
new_heft
resource
ls
new_heft[0]*resource
new_heft=np.array(((np.full((10,3),70) + (np.random.rand(10,1)*100))/resource),int)
new_heft
np.full((10,30),70)
np.full((10,3),70)
np.full((10,3),70) + np.random.rand(10,1)
np.full((10,3),70) + (np.random.rand(10,1)*100)
np.array(np.full((10,3),70) + (np.random.rand(10,1)*100),int)
seed(50)
from random import seed
seed(50)
np.array(np.full((10,3),70) + (np.random.rand(10,1)*100),int)
seed(50)
np.array(np.full((10,3),70) + (np.random.rand(10,1)*100),int)
seed(50)
np.array(np.full((10,3),70) + (np.random.rand(10,1)*100),int)
seed(30)
rand
rand()
rand(10)
random.rand
import random
rand
rand()
random.rand()
random.random()
seed(30)
random.random()
seed(50)
np.random()
np.random(10)
np.random
np.random.rand()
seed(50)
np.random.rand()
np.random.seed()
np.random.rand()
np.random.seed(50)
np.random.rand()
np.random.seed(50)
np.random.rand()
np.random.rand()
np.random.seed(50)
np.array(np.full((10,3),70) + (np.random.rand(10,1)*100),int)
np.random.seed(50)
np.array(np.full((10,3),70) + (np.random.rand(10,1)*100),int)
np.random.seed(50)
np.array(np.full((10,3),70) + (np.random.rand(10,1)*100),int)/resource
resource
np.random.seed(50)
new_heft_demand = np.array(np.full((10,3),70) + (np.random.rand(10,1)*100),int)
new_heft_demand
int(new_heft_demand/resource)
np.int(new_heft_demand/resource)
np.array(new_heft_demand/resource)
np.array(new_heft_demand/resource,int)
np.array(new_heft_demand/resource,int)*resource
np.array(new_heft_demand/resource)*resource
(np.array(new_heft_demand/resource)*resource)*int
(np.array(new_heft_demand/resource)*resource)
np.array((np.array(new_heft_demand/resource)*resource),int)
np.array(new_heft_demand/resource)*resource
np.array(new_heft_demand/resource)
round(np.array(new_heft_demand/resource))
round
np.round
np.round(np.array(new_heft_demand/resource))
np.round(np.array(new_heft_demand/resource))*resource
(np.round(np.array(new_heft_demand/resource))*resource)/resource
new_heft_demand
new_heft_demand/resource
round(new_heft_demand/resource)
np.round(new_heft_demand/resource)
csvfile = open('new_heft_throughput_comp.csv','w')
writer = csv.writer(csvfile)
writer.writerow(csv_header)
for row in np.round(new_heft_demand/resource):
    writer.writerow(row)
csvfile.close()
csvfile = open('new_heft_throughput_comp.csv','w')
writer = csv.writer(csvfile)
writer.writerow(csv_header)
for row in np.int(np.round(new_heft_demand/resource)):
    writer.writerow(row)
for row in np.array(np.round(new_heft_demand/resource),int):
    writer.writerow(row)
csvfile.close()
np.empty(105,3)
np.empty((105,3))
np.zeros((105,3))
np.zeros((105,3),int)
data[0]
zero = np.zeros((105,3),int).transpose()
zero[0]
zero[0][1 for x in range(1:10)]
zero[0][1:10]]1
zero[0][1:10]=1
zero[0]
zero[0][10]
np.array((np.zeros(10,1),np.zeros(10,1))
)
np.array([np.zeros(10,1),np.zeros(10,1)])
np.array([np.zeros((10,1)),np.zeros((10,1))])
np.array([np.zeros((10,1)).transpose(),np.zeros((10,1)).transpose()])
np.array([np.zeros((10,3)).transpose(),np.zeros((10,1)).transpose()])
np.array([np.zeros((10,3)).transpose(),np.zeros((10,1)).transpose()])[3][1]
np.array([np.zeros((10,3)).transpose(),np.zeros((10,1)).transpose()])[3]
np.array([np.zeros((10,3)).transpose(),np.zeros((10,1)).transpose()])[2]
np.array([np.zeros((10,3)).transpose(),np.zeros((10,1)).transpose()])[0]
np.array([np.zeros((10,3)).transpose(),np.zeros((10,1)).transpose()])[1]
zero = np.zeros((10,3))
zero
zero.reshape((10,4))
zero.reshape()
zero.reshape(10)
zero.resize(10,4)
zero.resize(new_array,(10,4))
zero
data
data.resize(10,4)
npdata
npdata.resize(10,4)
np.resize(zero,(10,4))
zero
np.resize(npdata,(10,100))
data=np.zeros((105,3*10))
data
nparray = np.array([0,1,1,0])
nparray2 = np.array([nparray])
nparray2
npdata
new_heft_demand
resource
heft_time = new_heft_demand/resource
heft_time
round(heft_time)
np.round(heft_time)
np.round(heft_time,int)
heft_time = new_heft_demand/resource
heft_time
round(heft_time)
np.round(heft_time)
np.array(round(heft_time),int)
np.array(np.round(heft_time),int)
%hist
%hist > mips_arrays.txt
ls
%hist -f mips_arrays.txt
